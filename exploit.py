#########################
## Connor Nelson, 2017 ##
#########################

# This is just a work in progress, still need to create multithreaded workers
# Eventually do error handling, network should not be assumed to be reliable

import argparse

from ictf import iCTF
from pwn import *

TIMEOUT = 5

def login(team_interface, username, password):
    client = iCTF(team_interface)
    team = client.login(username, password)
    return team

def get_services(team):
    services = team.get_service_list()
    fields = ['service_name', 'service_id', 'port']
    return [{f : s[f] for f in fields} for s in services]

def get_targets(team, services):
    return {s['service_id'] : {t['hostname'] : t['flag_id'] for t in
                               team.get_targets(s['service_id'])['targets']}
            for s in services}

def attack(session, service, targets, function):
    print 'Attacking %s [%d] @ Port %d...' % (service['service_name'],
                                              service['service_id'],
                                              service['port'])
    for hostname, flag_id in targets.items():
        remote = session.connect_remote(hostname, service['port'], TIMEOUT)
        if remote:
            function(remote, {'flag_id' : flag_id})
        else:
            print 'Error: timed out'
            
def submit_flags(team, flags):
    responses = zip(flags, team.submit_flag(flags))
    statuses = ['correct', 'ownflag', 'incorrect', 'alreadysubmitted',
                'notactive', 'toomanyincorrect']
    return {s : [r[0] for r in responses if r[1] == s] for s in statuses}

def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('-t', '--team-interface', required=True)    
    parser.add_argument('-u', '--username', required=True)
    parser.add_argument('-p', '--password', required=True)
    args = vars(parser.parse_args())

    team_interface = 'http://' + args['team_interface'] + '/'
    team = login(team_interface, args['username'], args['password'])

    services = get_services(team)
    targets = get_targets(team, services)
    flag_statuses = submit_flags(team, ['test123', 'testing', 'test_ha'])
    print services
    print targets
    print flag_statuses

if __name__ == '__main__':
    main()
